/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseObservation struct {

	// The configured time zone for the Managed Database in TZ database format (e.g. UTC, America/New_York, Europe/London).
	ClusterTimeZone *string `json:"clusterTimeZone,omitempty" tf:"cluster_time_zone,omitempty"`

	// The database engine of the new managed database.
	DatabaseEngine *string `json:"databaseEngine,omitempty" tf:"database_engine,omitempty"`

	// The database engine version of the new managed database.
	DatabaseEngineVersion *string `json:"databaseEngineVersion,omitempty" tf:"database_engine_version,omitempty"`

	// The date the managed database was added to your Vultr account.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// The managed database's default logical database.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// The hostname assigned to the managed database.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The ID of the managed database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A label for the managed database.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The date of the latest backup available on the managed database.
	LatestBackup *string `json:"latestBackup,omitempty" tf:"latest_backup,omitempty"`

	// The preferred maintenance day of week for the managed database.
	MaintenanceDow *string `json:"maintenanceDow,omitempty" tf:"maintenance_dow,omitempty"`

	// The preferred maintenance time for the managed database.
	MaintenanceTime *string `json:"maintenanceTime,omitempty" tf:"maintenance_time,omitempty"`

	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	MySQLLongQueryTime *float64 `json:"mysqlLongQueryTime,omitempty" tf:"mysql_long_query_time,omitempty"`

	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	MySQLRequirePrimaryKey *bool `json:"mysqlRequirePrimaryKey,omitempty" tf:"mysql_require_primary_key,omitempty"`

	// A list of SQL modes to configure for the managed database (MySQL engine types only - ALLOW_INVALID_DATES, ANSI, ANSI_QUOTES, ERROR_FOR_DIVISION_BY_ZERO, HIGH_NOT_PRECEDENCE, IGNORE_SPACE, NO_AUTO_VALUE_ON_ZERO, NO_DIR_IN_CREATE, NO_ENGINE_SUBSTITUTION, NO_UNSIGNED_SUBTRACTION, NO_ZERO_DATE, NO_ZERO_IN_DATE, ONLY_FULL_GROUP_BY, PIPES_AS_CONCAT, REAL_AS_FLOAT, STRICT_ALL_TABLES, STRICT_TRANS_TABLES, TIME_TRUNCATE_FRACTIONAL, TRADITIONAL).
	MySQLSQLModes []*string `json:"mysqlSqlModes,omitempty" tf:"mysql_sql_modes,omitempty"`

	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	MySQLSlowQueryLog *bool `json:"mysqlSlowQueryLog,omitempty" tf:"mysql_slow_query_log,omitempty"`

	// The password for the managed database's primary admin user.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of the plan that you want the managed database to subscribe to. See List Managed Database Plans
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The description of the disk(s) on the managed database.
	PlanDisk *float64 `json:"planDisk,omitempty" tf:"plan_disk,omitempty"`

	// The amount of memory available on the managed database in MB.
	PlanRAM *float64 `json:"planRam,omitempty" tf:"plan_ram,omitempty"`

	// The number of standby nodes available on the managed database.
	PlanReplicas *float64 `json:"planReplicas,omitempty" tf:"plan_replicas,omitempty"`

	// The number of virtual CPUs available on the managed database.
	PlanVcpus *float64 `json:"planVcpus,omitempty" tf:"plan_vcpus,omitempty"`

	// The connection port for the managed database.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// A list of read replicas attached to the managed database.
	ReadReplicas []ReadReplicasObservation `json:"readReplicas,omitempty" tf:"read_replicas,omitempty"`

	// The configuration value for the data eviction policy on the managed database (Redis engine types only - noeviction, allkeys-lru, volatile-lru, allkeys-random, volatile-random, volatile-ttl, volatile-lfu, allkeys-lfu).
	RedisEvictionPolicy *string `json:"redisEvictionPolicy,omitempty" tf:"redis_eviction_policy,omitempty"`

	// The ID of the region that the managed database is to be created in. See List Regions
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The current status of the managed database (poweroff, rebuilding, rebalancing, running).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The tag to assign to the managed database.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// A list of allowed IP addresses for the managed database.
	TrustedIps []*string `json:"trustedIps,omitempty" tf:"trusted_ips,omitempty"`

	// The primary admin user for the managed database.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The ID of the managed database.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type DatabaseParameters struct {

	// The configured time zone for the Managed Database in TZ database format (e.g. UTC, America/New_York, Europe/London).
	// +kubebuilder:validation:Optional
	ClusterTimeZone *string `json:"clusterTimeZone,omitempty" tf:"cluster_time_zone,omitempty"`

	// The database engine of the new managed database.
	// +kubebuilder:validation:Optional
	DatabaseEngine *string `json:"databaseEngine,omitempty" tf:"database_engine,omitempty"`

	// The database engine version of the new managed database.
	// +kubebuilder:validation:Optional
	DatabaseEngineVersion *string `json:"databaseEngineVersion,omitempty" tf:"database_engine_version,omitempty"`

	// A label for the managed database.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The preferred maintenance day of week for the managed database.
	// +kubebuilder:validation:Optional
	MaintenanceDow *string `json:"maintenanceDow,omitempty" tf:"maintenance_dow,omitempty"`

	// The preferred maintenance time for the managed database.
	// +kubebuilder:validation:Optional
	MaintenanceTime *string `json:"maintenanceTime,omitempty" tf:"maintenance_time,omitempty"`

	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLLongQueryTime *float64 `json:"mysqlLongQueryTime,omitempty" tf:"mysql_long_query_time,omitempty"`

	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLRequirePrimaryKey *bool `json:"mysqlRequirePrimaryKey,omitempty" tf:"mysql_require_primary_key,omitempty"`

	// A list of SQL modes to configure for the managed database (MySQL engine types only - ALLOW_INVALID_DATES, ANSI, ANSI_QUOTES, ERROR_FOR_DIVISION_BY_ZERO, HIGH_NOT_PRECEDENCE, IGNORE_SPACE, NO_AUTO_VALUE_ON_ZERO, NO_DIR_IN_CREATE, NO_ENGINE_SUBSTITUTION, NO_UNSIGNED_SUBTRACTION, NO_ZERO_DATE, NO_ZERO_IN_DATE, ONLY_FULL_GROUP_BY, PIPES_AS_CONCAT, REAL_AS_FLOAT, STRICT_ALL_TABLES, STRICT_TRANS_TABLES, TIME_TRUNCATE_FRACTIONAL, TRADITIONAL).
	// +kubebuilder:validation:Optional
	MySQLSQLModes []*string `json:"mysqlSqlModes,omitempty" tf:"mysql_sql_modes,omitempty"`

	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLSlowQueryLog *bool `json:"mysqlSlowQueryLog,omitempty" tf:"mysql_slow_query_log,omitempty"`

	// The password for the managed database's primary admin user.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of the plan that you want the managed database to subscribe to. See List Managed Database Plans
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The description of the disk(s) on the managed database.
	// +kubebuilder:validation:Optional
	PlanDisk *float64 `json:"planDisk,omitempty" tf:"plan_disk,omitempty"`

	// A list of read replicas attached to the managed database.
	// +kubebuilder:validation:Optional
	ReadReplicas []ReadReplicasParameters `json:"readReplicas,omitempty" tf:"read_replicas,omitempty"`

	// The configuration value for the data eviction policy on the managed database (Redis engine types only - noeviction, allkeys-lru, volatile-lru, allkeys-random, volatile-random, volatile-ttl, volatile-lfu, allkeys-lfu).
	// +kubebuilder:validation:Optional
	RedisEvictionPolicy *string `json:"redisEvictionPolicy,omitempty" tf:"redis_eviction_policy,omitempty"`

	// The ID of the region that the managed database is to be created in. See List Regions
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The tag to assign to the managed database.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// A list of allowed IP addresses for the managed database.
	// +kubebuilder:validation:Optional
	TrustedIps []*string `json:"trustedIps,omitempty" tf:"trusted_ips,omitempty"`

	// The ID of the managed database.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ReadReplicasObservation struct {

	// The configured time zone for the Managed Database in TZ database format (e.g. UTC, America/New_York, Europe/London).
	ClusterTimeZone *string `json:"clusterTimeZone,omitempty" tf:"cluster_time_zone,omitempty"`

	// The database engine of the new managed database.
	DatabaseEngine *string `json:"databaseEngine,omitempty" tf:"database_engine,omitempty"`

	// The database engine version of the new managed database.
	DatabaseEngineVersion *string `json:"databaseEngineVersion,omitempty" tf:"database_engine_version,omitempty"`

	// The date the managed database was added to your Vultr account.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// The managed database's default logical database.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// The hostname assigned to the managed database.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The ID of the managed database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A label for the managed database.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The date of the latest backup available on the managed database.
	LatestBackup *string `json:"latestBackup,omitempty" tf:"latest_backup,omitempty"`

	// The preferred maintenance day of week for the managed database.
	MaintenanceDow *string `json:"maintenanceDow,omitempty" tf:"maintenance_dow,omitempty"`

	// The preferred maintenance time for the managed database.
	MaintenanceTime *string `json:"maintenanceTime,omitempty" tf:"maintenance_time,omitempty"`

	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	MySQLLongQueryTime *float64 `json:"mysqlLongQueryTime,omitempty" tf:"mysql_long_query_time,omitempty"`

	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	MySQLRequirePrimaryKey *bool `json:"mysqlRequirePrimaryKey,omitempty" tf:"mysql_require_primary_key,omitempty"`

	// A list of SQL modes to configure for the managed database (MySQL engine types only - ALLOW_INVALID_DATES, ANSI, ANSI_QUOTES, ERROR_FOR_DIVISION_BY_ZERO, HIGH_NOT_PRECEDENCE, IGNORE_SPACE, NO_AUTO_VALUE_ON_ZERO, NO_DIR_IN_CREATE, NO_ENGINE_SUBSTITUTION, NO_UNSIGNED_SUBTRACTION, NO_ZERO_DATE, NO_ZERO_IN_DATE, ONLY_FULL_GROUP_BY, PIPES_AS_CONCAT, REAL_AS_FLOAT, STRICT_ALL_TABLES, STRICT_TRANS_TABLES, TIME_TRUNCATE_FRACTIONAL, TRADITIONAL).
	MySQLSQLModes []*string `json:"mysqlSqlModes,omitempty" tf:"mysql_sql_modes,omitempty"`

	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	MySQLSlowQueryLog *bool `json:"mysqlSlowQueryLog,omitempty" tf:"mysql_slow_query_log,omitempty"`

	// The password for the managed database's primary admin user.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of the plan that you want the managed database to subscribe to. See List Managed Database Plans
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The description of the disk(s) on the managed database.
	PlanDisk *float64 `json:"planDisk,omitempty" tf:"plan_disk,omitempty"`

	// The amount of memory available on the managed database in MB.
	PlanRAM *float64 `json:"planRam,omitempty" tf:"plan_ram,omitempty"`

	// The number of standby nodes available on the managed database.
	PlanReplicas *float64 `json:"planReplicas,omitempty" tf:"plan_replicas,omitempty"`

	// The number of virtual CPUs available on the managed database.
	PlanVcpus *float64 `json:"planVcpus,omitempty" tf:"plan_vcpus,omitempty"`

	// The connection port for the managed database.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The configuration value for the data eviction policy on the managed database (Redis engine types only - noeviction, allkeys-lru, volatile-lru, allkeys-random, volatile-random, volatile-ttl, volatile-lfu, allkeys-lfu).
	RedisEvictionPolicy *string `json:"redisEvictionPolicy,omitempty" tf:"redis_eviction_policy,omitempty"`

	// The ID of the region that the managed database is to be created in. See List Regions
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The current status of the managed database (poweroff, rebuilding, rebalancing, running).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The tag to assign to the managed database.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// A list of allowed IP addresses for the managed database.
	TrustedIps []*string `json:"trustedIps,omitempty" tf:"trusted_ips,omitempty"`

	// The primary admin user for the managed database.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The ID of the managed database.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ReadReplicasParameters struct {

	// A label for the managed database.
	// +kubebuilder:validation:Required
	Label *string `json:"label" tf:"label,omitempty"`

	// The configuration value for the long query time (in seconds) on the managed database (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLLongQueryTime *float64 `json:"mysqlLongQueryTime,omitempty" tf:"mysql_long_query_time,omitempty"`

	// The configuration value for whether primary keys are required on the managed database (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLRequirePrimaryKey *bool `json:"mysqlRequirePrimaryKey,omitempty" tf:"mysql_require_primary_key,omitempty"`

	// A list of SQL modes to configure for the managed database (MySQL engine types only - ALLOW_INVALID_DATES, ANSI, ANSI_QUOTES, ERROR_FOR_DIVISION_BY_ZERO, HIGH_NOT_PRECEDENCE, IGNORE_SPACE, NO_AUTO_VALUE_ON_ZERO, NO_DIR_IN_CREATE, NO_ENGINE_SUBSTITUTION, NO_UNSIGNED_SUBTRACTION, NO_ZERO_DATE, NO_ZERO_IN_DATE, ONLY_FULL_GROUP_BY, PIPES_AS_CONCAT, REAL_AS_FLOAT, STRICT_ALL_TABLES, STRICT_TRANS_TABLES, TIME_TRUNCATE_FRACTIONAL, TRADITIONAL).
	// +kubebuilder:validation:Optional
	MySQLSQLModes []*string `json:"mysqlSqlModes,omitempty" tf:"mysql_sql_modes,omitempty"`

	// The configuration value for slow query logging on the managed database (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLSlowQueryLog *bool `json:"mysqlSlowQueryLog,omitempty" tf:"mysql_slow_query_log,omitempty"`

	// The description of the disk(s) on the managed database.
	// +kubebuilder:validation:Optional
	PlanDisk *float64 `json:"planDisk,omitempty" tf:"plan_disk,omitempty"`

	// The configuration value for the data eviction policy on the managed database (Redis engine types only - noeviction, allkeys-lru, volatile-lru, allkeys-random, volatile-random, volatile-ttl, volatile-lfu, allkeys-lfu).
	// +kubebuilder:validation:Optional
	RedisEvictionPolicy *string `json:"redisEvictionPolicy,omitempty" tf:"redis_eviction_policy,omitempty"`

	// The ID of the region that the managed database is to be created in. See List Regions
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The tag to assign to the managed database.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// A list of allowed IP addresses for the managed database.
	// +kubebuilder:validation:Optional
	TrustedIps []*string `json:"trustedIps,omitempty" tf:"trusted_ips,omitempty"`
}

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseParameters `json:"forProvider"`
}

// DatabaseStatus defines the observed state of Database.
type DatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Database is the Schema for the Databases API. Provides a Vultr database resource. This can be used to create, read, modify, and delete managed databases on your Vultr account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vultr}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.databaseEngine)",message="databaseEngine is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.databaseEngineVersion)",message="databaseEngineVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.label)",message="label is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.plan)",message="plan is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",message="region is a required parameter"
	Spec   DatabaseSpec   `json:"spec"`
	Status DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseList contains a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Repository type metadata.
var (
	Database_Kind             = "Database"
	Database_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Database_Kind}.String()
	Database_KindAPIVersion   = Database_Kind + "." + CRDGroupVersion.String()
	Database_GroupVersionKind = CRDGroupVersion.WithKind(Database_Kind)
)

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
