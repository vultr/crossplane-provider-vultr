/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicaObservation struct {

	// The configured time zone for the managed database read replica in TZ database format.
	ClusterTimeZone *string `json:"clusterTimeZone,omitempty" tf:"cluster_time_zone,omitempty"`

	// The database engine of the managed database read replica.
	DatabaseEngine *string `json:"databaseEngine,omitempty" tf:"database_engine,omitempty"`

	// The database engine version of the managed database read replica.
	DatabaseEngineVersion *string `json:"databaseEngineVersion,omitempty" tf:"database_engine_version,omitempty"`

	// The managed database ID you want to attach this replica to.
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// The date the managed database read replica was added to your Vultr account.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// The managed database read replica's default logical database.
	Dbname *string `json:"dbname,omitempty" tf:"dbname,omitempty"`

	// The hostname assigned to the managed database read replica.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The ID of the managed database read replica.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A label for the managed database read replica.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The date of the latest backup available on the managed database read replica.
	LatestBackup *string `json:"latestBackup,omitempty" tf:"latest_backup,omitempty"`

	// The preferred maintenance day of week for the managed database read replica.
	MaintenanceDow *string `json:"maintenanceDow,omitempty" tf:"maintenance_dow,omitempty"`

	// The preferred maintenance time for the managed database read replica.
	MaintenanceTime *string `json:"maintenanceTime,omitempty" tf:"maintenance_time,omitempty"`

	// The configuration value for the long query time (in seconds) on the managed database read replica (MySQL engine types only).
	MySQLLongQueryTime *float64 `json:"mysqlLongQueryTime,omitempty" tf:"mysql_long_query_time,omitempty"`

	// The configuration value for whether primary keys are required on the managed database read replica (MySQL engine types only).
	MySQLRequirePrimaryKey *bool `json:"mysqlRequirePrimaryKey,omitempty" tf:"mysql_require_primary_key,omitempty"`

	// A list of SQL modes currently configured for the managed database read replica (MySQL engine types only).
	MySQLSQLModes []*string `json:"mysqlSqlModes,omitempty" tf:"mysql_sql_modes,omitempty"`

	// The configuration value for slow query logging on the managed database read replica (MySQL engine types only).
	MySQLSlowQueryLog *bool `json:"mysqlSlowQueryLog,omitempty" tf:"mysql_slow_query_log,omitempty"`

	// The password for the managed database read replica's primary admin user.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The managed database read replica's plan ID.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The description of the disk(s) on the managed database read replica.
	PlanDisk *float64 `json:"planDisk,omitempty" tf:"plan_disk,omitempty"`

	// The amount of memory available on the managed database read replica in MB.
	PlanRAM *float64 `json:"planRam,omitempty" tf:"plan_ram,omitempty"`

	// The number of standby nodes available on the managed database read replica.
	PlanReplicas *float64 `json:"planReplicas,omitempty" tf:"plan_replicas,omitempty"`

	// The number of virtual CPUs available on the managed database read replica.
	PlanVcpus *float64 `json:"planVcpus,omitempty" tf:"plan_vcpus,omitempty"`

	// The connection port for the managed database read replica.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The configuration value for the data eviction policy on the managed database read replica (Redis engine types only).
	RedisEvictionPolicy *string `json:"redisEvictionPolicy,omitempty" tf:"redis_eviction_policy,omitempty"`

	// The ID of the region that the managed database read replica is to be created in. See List Regions
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The current status of the managed database read replica (poweroff, rebuilding, rebalancing, running).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The tag to assign to the managed database read replica.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// A list of allowed IP addresses for the managed database read replica.
	TrustedIps []*string `json:"trustedIps,omitempty" tf:"trusted_ips,omitempty"`

	// The primary admin user for the managed database read replica.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The ID of the managed database read replica.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ReplicaParameters struct {

	// The managed database ID you want to attach this replica to.
	// +kubebuilder:validation:Optional
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// A label for the managed database read replica.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The configuration value for the long query time (in seconds) on the managed database read replica (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLLongQueryTime *float64 `json:"mysqlLongQueryTime,omitempty" tf:"mysql_long_query_time,omitempty"`

	// The configuration value for whether primary keys are required on the managed database read replica (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLRequirePrimaryKey *bool `json:"mysqlRequirePrimaryKey,omitempty" tf:"mysql_require_primary_key,omitempty"`

	// A list of SQL modes currently configured for the managed database read replica (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLSQLModes []*string `json:"mysqlSqlModes,omitempty" tf:"mysql_sql_modes,omitempty"`

	// The configuration value for slow query logging on the managed database read replica (MySQL engine types only).
	// +kubebuilder:validation:Optional
	MySQLSlowQueryLog *bool `json:"mysqlSlowQueryLog,omitempty" tf:"mysql_slow_query_log,omitempty"`

	// The description of the disk(s) on the managed database read replica.
	// +kubebuilder:validation:Optional
	PlanDisk *float64 `json:"planDisk,omitempty" tf:"plan_disk,omitempty"`

	// The configuration value for the data eviction policy on the managed database read replica (Redis engine types only).
	// +kubebuilder:validation:Optional
	RedisEvictionPolicy *string `json:"redisEvictionPolicy,omitempty" tf:"redis_eviction_policy,omitempty"`

	// The ID of the region that the managed database read replica is to be created in. See List Regions
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The tag to assign to the managed database read replica.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// A list of allowed IP addresses for the managed database read replica.
	// +kubebuilder:validation:Optional
	TrustedIps []*string `json:"trustedIps,omitempty" tf:"trusted_ips,omitempty"`
}

// ReplicaSpec defines the desired state of Replica
type ReplicaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicaParameters `json:"forProvider"`
}

// ReplicaStatus defines the observed state of Replica.
type ReplicaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Replica is the Schema for the Replicas API. Provides a Vultr database replica resource. This can be used to create, read, modify, and delete managed database read replicas on your Vultr account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vultr}
type Replica struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.databaseId)",message="databaseId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.label)",message="label is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",message="region is a required parameter"
	Spec   ReplicaSpec   `json:"spec"`
	Status ReplicaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicaList contains a list of Replicas
type ReplicaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Replica `json:"items"`
}

// Repository type metadata.
var (
	Replica_Kind             = "Replica"
	Replica_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Replica_Kind}.String()
	Replica_KindAPIVersion   = Replica_Kind + "." + CRDGroupVersion.String()
	Replica_GroupVersionKind = CRDGroupVersion.WithKind(Replica_Kind)
)

func init() {
	SchemeBuilder.Register(&Replica{}, &ReplicaList{})
}
