/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessControlObservation struct {

	// The list of command category rules for this managed database user.
	RedisACLCategories []*string `json:"redisAclCategories,omitempty" tf:"redis_acl_categories,omitempty"`

	// The list of publish/subscribe channel patterns for this managed database user.
	RedisACLChannels []*string `json:"redisAclChannels,omitempty" tf:"redis_acl_channels,omitempty"`

	// The list of individual command rules for this managed database user.
	RedisACLCommands []*string `json:"redisAclCommands,omitempty" tf:"redis_acl_commands,omitempty"`

	// The list of access rules for this managed database user.
	RedisACLKeys []*string `json:"redisAclKeys,omitempty" tf:"redis_acl_keys,omitempty"`
}

type AccessControlParameters struct {

	// The list of command category rules for this managed database user.
	// +kubebuilder:validation:Required
	RedisACLCategories []*string `json:"redisAclCategories" tf:"redis_acl_categories,omitempty"`

	// The list of publish/subscribe channel patterns for this managed database user.
	// +kubebuilder:validation:Required
	RedisACLChannels []*string `json:"redisAclChannels" tf:"redis_acl_channels,omitempty"`

	// The list of individual command rules for this managed database user.
	// +kubebuilder:validation:Required
	RedisACLCommands []*string `json:"redisAclCommands" tf:"redis_acl_commands,omitempty"`

	// The list of access rules for this managed database user.
	// +kubebuilder:validation:Required
	RedisACLKeys []*string `json:"redisAclKeys" tf:"redis_acl_keys,omitempty"`
}

type UserObservation struct {
	AccessControl []AccessControlObservation `json:"accessControl,omitempty" tf:"access_control,omitempty"`

	// The managed database ID you want to attach this user to.
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// The encryption type of the new managed database user's password (MySQL engine types only - caching_sha2_password, mysql_native_password).
	Encryption *string `json:"encryption,omitempty" tf:"encryption,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The password of the new managed database user.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The username of the new managed database user.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserParameters struct {

	// +kubebuilder:validation:Optional
	AccessControl []AccessControlParameters `json:"accessControl,omitempty" tf:"access_control,omitempty"`

	// The managed database ID you want to attach this user to.
	// +kubebuilder:validation:Optional
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// The encryption type of the new managed database user's password (MySQL engine types only - caching_sha2_password, mysql_native_password).
	// +kubebuilder:validation:Optional
	Encryption *string `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// The password of the new managed database user.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The username of the new managed database user.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API. Provides a Vultr database user resource. This can be used to create, read, modify, and delete users for a managed database on your Vultr account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vultr}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.databaseId)",message="databaseId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.username)",message="username is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
