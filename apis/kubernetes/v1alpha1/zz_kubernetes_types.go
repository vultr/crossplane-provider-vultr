/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KubernetesObservation struct {

	// IP range that your pods will run on in this cluster.
	ClusterSubnet *string `json:"clusterSubnet,omitempty" tf:"cluster_subnet,omitempty"`

	// Date of VKE cluster creation.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// Domain for your Kubernetes clusters control plane.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// The VKE cluster ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP address of VKE cluster control plane.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// The VKE clusters label.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Contains the default node pool that was deployed.
	NodePools []NodePoolsObservation `json:"nodePools,omitempty" tf:"node_pools,omitempty"`

	// The region your VKE cluster will be deployed in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// IP range that services will run on this cluster.
	ServiceSubnet *string `json:"serviceSubnet,omitempty" tf:"service_subnet,omitempty"`

	// The overall status of the cluster.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The version your VKE cluster you want deployed. See Available Version
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type KubernetesParameters struct {

	// The VKE clusters label.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Contains the default node pool that was deployed.
	// +kubebuilder:validation:Optional
	NodePools []NodePoolsParameters `json:"nodePools,omitempty" tf:"node_pools,omitempty"`

	// The region your VKE cluster will be deployed in.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The version your VKE cluster you want deployed. See Available Version
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NodePoolsObservation struct {

	// Enable the auto scaler for the default node pool.
	AutoScaler *bool `json:"autoScaler,omitempty" tf:"auto_scaler,omitempty"`

	// Date of VKE cluster creation.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// Date of node pool updates.
	DateUpdated *string `json:"dateUpdated,omitempty" tf:"date_updated,omitempty"`

	// The VKE cluster ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The VKE clusters label.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The maximum number of nodes to use with the auto scaler.
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// The minimum number of nodes to use with the auto scaler.
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// The number of nodes in this node pool.
	NodeQuantity *float64 `json:"nodeQuantity,omitempty" tf:"node_quantity,omitempty"`

	// Array that contains information about nodes within this node pool.
	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The plan to be used in this node pool. See Plans List Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The overall status of the cluster.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Tag for node pool.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type NodePoolsParameters struct {

	// Enable the auto scaler for the default node pool.
	// +kubebuilder:validation:Optional
	AutoScaler *bool `json:"autoScaler,omitempty" tf:"auto_scaler,omitempty"`

	// The VKE clusters label.
	// +kubebuilder:validation:Required
	Label *string `json:"label" tf:"label,omitempty"`

	// The maximum number of nodes to use with the auto scaler.
	// +kubebuilder:validation:Optional
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// The minimum number of nodes to use with the auto scaler.
	// +kubebuilder:validation:Optional
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// The number of nodes in this node pool.
	// +kubebuilder:validation:Required
	NodeQuantity *float64 `json:"nodeQuantity" tf:"node_quantity,omitempty"`

	// The plan to be used in this node pool. See Plans List Note the minimum plan requirements must have at least 1 core and 2 gbs of memory.
	// +kubebuilder:validation:Required
	Plan *string `json:"plan" tf:"plan,omitempty"`
}

type NodesObservation struct {

	// Date of VKE cluster creation.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// The VKE cluster ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The VKE clusters label.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The overall status of the cluster.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NodesParameters struct {
}

// KubernetesSpec defines the desired state of Kubernetes
type KubernetesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KubernetesParameters `json:"forProvider"`
}

// KubernetesStatus defines the observed state of Kubernetes.
type KubernetesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KubernetesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Kubernetes is the Schema for the Kubernetess API. Provides a Vultr Kubernetes Engine (VKE) resource. This can be used to create, read, modify, and delete VKE clusters on your Vultr account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vultr}
type Kubernetes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.label)",message="label is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",message="region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.version)",message="version is a required parameter"
	Spec   KubernetesSpec   `json:"spec"`
	Status KubernetesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesList contains a list of Kubernetess
type KubernetesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Kubernetes `json:"items"`
}

// Repository type metadata.
var (
	Kubernetes_Kind             = "Kubernetes"
	Kubernetes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Kubernetes_Kind}.String()
	Kubernetes_KindAPIVersion   = Kubernetes_Kind + "." + CRDGroupVersion.String()
	Kubernetes_GroupVersionKind = CRDGroupVersion.WithKind(Kubernetes_Kind)
)

func init() {
	SchemeBuilder.Register(&Kubernetes{}, &KubernetesList{})
}
